import os
import argparse
import re
from pathlib import Path

import pandas as pd
import seaborn as sns
from matplotlib import pyplot as plt
import numpy as np

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--logdir', type=str, default='../results_ac2/results_ac_final/')
    parser.add_argument('--output', type=str, default='../results_final')
    args = parser.parse_args()

    # index_mapping = {'agent':'agent','episode': 'Episode'}
    #
    # measure_mapping = {'acceptance_rate': 'accept_rate','serivce_1_requests':'num_requests','serivce_1_accepts':'serivce_1_accepts','serivce_2_accepts':'serivce_2_accepts','serivce_3_accepts':'serivce_3_accepts','mean_cutil':'mean_cutil','mean_dutil':'mean_dutil'}

    results = pd.DataFrame()

    dirs = [directory for directory in os.listdir(args.logdir)]
    tables = [Path(args.logdir) /
              'objective_compare.csv' for directory in dirs]
    # tables=['/home/hello/桌面/xiaofu/FutureCoord/MaskablePPO_GRC_traffic2.0_fairness_10w/MaskablePPO_GRC_traffic2.0_fairness_prior_10W/results/results.csv']
    tables = [table for table in tables if table.exists()]
    print(tables)
    for table in tables:
        data = pd.read_csv(table)
        results = pd.concat((results, data))
    print(results)
    # results = results.rename(columns={**index_mapping, **measure_mapping})
    results = results.reset_index()
    # print(results['place'])
    # sns.set_style("whitegrid")
    # for measure in measure_mapping.values():
    #     if not re.findall('accepts',measure) and not re.findall('mean',measure):
    #         # fig, ax = plt.subplots(figsize=(7, 6))
    #         # sns.boxplot(x='ep_length', y=measure, data=results, ax=ax)
    #         # sns.despine()
    #         # fig.savefig(Path(args.output) / f'{measure}_agent_util.pdf')
    #         # fig.savefig(Path(args.output) / f'{measure}_agent_util.pdf')
    #         fig, ax = plt.subplots(figsize=(10,10))
    #         sns.lineplot(x="num_requests", y=measure,hue="place", style="place", data=results)
    #         sns.despine()
    #         fig.savefig(Path(args.output) / f'{measure}_agent_util.pdf')
    #     else:
    #         fig, ax = plt.subplots(figsize=(10,10))
    #         sns.barplot(x="num_requests", y=measure,hue="place", data=results)
    #         sns.despine()
    #         fig.savefig(Path(args.output) / f'{measure}_agent_util.pdf')
    # fig, ax = plt.subplots(figsize=(10, 6))
    # # ax2=ax.twinx()
    # # sns.barplot(x="agent",y="timeout",data=results)
    # sns.barplot(x="arrival_rate", y="accept_rate", hue="agent",data=results)
    # fig.tight_layout()
    # sns.despine()
    # fig.savefig(Path(args.output) / f'accept_rate3.pdf')

    # fig, ax = plt.subplots(figsize=(6, 6))
    # # ax2=ax.twinx()
    # # sns.barplot(x="agent",y="timeout",data=results)
    # sns.set(font='SimSun',rc={"font.size":9})
    # fig1=sns.barplot(x="arrival_rate", y="time",hue='agent' ,data=results)
    # fig1.set_yticks([10,100,1000,2000,3000,4000,5000,6000,7000,8000,9000,10000])
    # fig1.set_ylim(100,10000)
    # fig.tight_layout()
    # sns.despine()
    # fig.savefig(Path(args.output) / f'timeout_without_cutoff.pdf')
    # sns.set_style("whitegrid")
    sns.set_style("whitegrid")
    fig, ax = plt.subplots(figsize=(8, 6))
    # ax2=ax.twinx()
    # sns.barplot(x="agent",y="timeout",data=results)
    # sns.set(font='SimSun',font_scale=1.4)
    fig1=sns.lineplot(x="arrival_rate", y="reward",hue='objective',data=results)
    fig1.legend(loc='upper left',ncol=2,columnspacing=0.1,labelspacing=0.1,handletextpad=0.1)
    plt.setp(fig1.get_legend().get_texts())
    fig.tight_layout()
    sns.despine()
    fig.savefig(Path(args.output) / f'objective_reward.pdf')
    sns.set_style("whitegrid")
    fig, ax = plt.subplots(figsize=(8, 6))
    # ax2=ax.twinx()
    # sns.barplot(x="agent",y="timeout",data=results)
    # sns.set(font='SimSun',font_scale=1.4)
    fig1 = sns.lineplot(x="arrival_rate", y="jain index", hue='objective', data=results)
    fig1.legend(loc='upper left', ncol=2, columnspacing=0.1, labelspacing=0.1, handletextpad=0.1)
    plt.setp(fig1.get_legend().get_texts())
    fig.tight_layout()
    sns.despine()
    fig.savefig(Path(args.output) / f'jain_index.pdf')
    # sns.set(font='SimSun',font_scale=1.0)
    # sns.set_style("whitegrid")
    # fig, ax = plt.subplots(figsize=(4, 4))
    # # ax2=ax.twinx()
    # # sns.barplot(x="agent",y="timeout",data=results)
    # # sns.set(font='SimSun',font_scale=1.4)
    # fig1=sns.barplot(x="arrival_rate", y="time",hue='agent' ,data=results)
    # fig1.legend(loc='upper left',ncol=2,columnspacing=0.1,labelspacing=0.1,handletextpad=0.1)
    # plt.setp(fig1.get_legend().get_texts())
    # fig.tight_layout()
    # sns.despine()
    # fig.savefig(Path(args.output) / f'timeout_without_cutoff.pdf')
    # sns.set(font='SimSun',font_scale=1.0)
    # sns.set_style("whitegrid")
    # fig, ax = plt.subplots(figsize=(4, 4))
    # # ax2=ax.twinx()
    # # sns.barplot(x="agent",y="timeout",data=results)
    # # sns.set(font='SimSun',font_scale=1.4)
    # fig1=sns.barplot(x="arrival_rate", y="mean_cutil",hue='agent' ,data=results)
    # fig1.legend(loc='upper left',ncol=2,columnspacing=0.1,labelspacing=0.1,handletextpad=0.1)
    # plt.setp(fig1.get_legend().get_texts())
    # # sns.barplot(x="agent",y="timeout",data=results)
    # fig.tight_layout()
    # sns.despine()
    # fig.savefig(Path(args.output) / f'mean_cutil.pdf')
    # sns.set(font='SimSun',font_scale=1.0)
    # sns.set_style("whitegrid")
    # fig, ax = plt.subplots(figsize=(4, 4))
    # # ax2=ax.twinx()
    # # sns.barplot(x="agent",y="timeout",data=results)
    # # sns.set(font='SimSun',font_scale=1.4)
    # fig1=sns.barplot(x="arrival_rate", y="mean_dutil",hue='agent' ,data=results)
    # fig1.legend(loc='upper left',ncol=2,columnspacing=0.1,labelspacing=0.1,handletextpad=0.1)
    # plt.setp(fig1.get_legend().get_texts())
    # # sns.barplot(x="agent",y="timeout",data=results)
    # fig.tight_layout()
    # sns.despine()
    # fig.savefig(Path(args.output) / f'mean_dutil.pdf')
    # results = pd.DataFrame()
    #
    # dirs = [directory for directory in os.listdir(args.logdir)]
    # tables = [Path(args.logdir) /
    #           'results2.csv' for directory in dirs]
    # # tables=['/home/hello/桌面/xiaofu/FutureCoord/MaskablePPO_GRC_traffic2.0_fairness_10w/MaskablePPO_GRC_traffic2.0_fairness_prior_10W/results/results.csv']
    # tables = [table for table in tables if table.exists()]
    # print(tables)
    # for table in tables:
    #     data = pd.read_csv(table)
    #     results = pd.concat((results, data))
    # print(results)
    # # results = results.rename(columns={**index_mapping, **measure_mapping})
    # results = results.reset_index()
    # sns.set(font='SimSun', font_scale=1.0)
    # sns.set_style("whitegrid")
    # fig, ax = plt.subplots(figsize=(4, 4))
    # # ax2=ax.twinx()
    # # sns.barplot(x="agent",y="timeout",data=results)
    # # sns.set(font='SimSun',font_scale=1.4)
    # fig1 = sns.barplot(x="arrival_rate", y="accept_rate", hue='agent', data=results)
    # fig1.legend(loc='upper left', ncol=2, columnspacing=0.1, labelspacing=0.1, handletextpad=0.1)
    # plt.setp(fig1.get_legend().get_texts())
    # fig.tight_layout()
    # sns.despine()
    # fig.savefig(Path(args.output) / f'accept_rate_with_cutoff.pdf')
    # sns.set(font='SimSun', font_scale=1.0)
    # sns.set_style("whitegrid")
    # fig, ax = plt.subplots(figsize=(4, 4))
    # # ax2=ax.twinx()
    # # sns.barplot(x="agent",y="timeout",data=results)
    # # sns.set(font='SimSun',font_scale=1.4)
    # fig1 = sns.barplot(x="arrival_rate", y="time", hue='agent', data=results)
    # fig1.legend(loc='upper left', ncol=2, columnspacing=0.1, labelspacing=0.1, handletextpad=0.1)
    # plt.setp(fig1.get_legend().get_texts())
    # fig.tight_layout()
    # sns.despine()
    # fig.savefig(Path(args.output) / f'timeout_with_cutoff.pdf')
    # # sns.set_style("whitegrid")
    # # fig, ax = plt.subplots(figsize=(6, 6))
    # # # ax2=ax.twinx()
    # # # sns.barplot(x="agent",y="timeout",data=results)
    # # sns.set(font='SimSun',rc={"font.size":9})
    # # sns.barplot(x="agent", y="error_times",data=results)
    # # fig.tight_layout()
    # # sns.despine()
    # # fig.savefig(Path(args.output) / f'emulation_error_times.pdf')
    # # import matplotlib.pyplot as plt
    # # from brokenaxes import brokenaxes
    # # import numpy as np
    # #
    # # fig = plt.figure(figsize=(5, 2))
    # # bax = brokenaxes(xlims=((0, .1), (.4, .7)), ylims=((-1, .7), (.79, 1)), hspace=.05)
    # # x = np.linspace(0, 1, 100)
    # # bax.plot(x, np.sin(10 * x), label='sin')
    # # bax.plot(x, np.cos(10 * x), label='cos')
    # # bax.legend(loc=3)
    # # bax.set_xlabel('time')
    # # bax.set_ylabel('value')
    # # fig, ax = plt.subplots(figsize=(5, 6))
    # # # ax2=ax.twinx()
    # # # sns.barplot(x="agent",y="timeout",data=results)
    # # sns.barplot(x="agent", y="error_times", data=results)
    # # fig.tight_layout()
    # # sns.despine()
    # # fig.savefig(Path(args.output) / f'timeout_error_times_final2.pdf')
    # # fig, ax = plt.subplots(figsize=(10, 6))
    # # ax2=ax.twinx()
    # # sns.barplot(x="agent",y="timeout",data=results)
    # # sns.barplot(x="arrival_rate", y="mean_cutil", hue="agent", data=results)
    # # fig.tight_layout()
    # # sns.despine()
    # # fig.savefig(Path(args.output) / f'mean_cutil2.pdf')
    # # fig, ax = plt.subplots(figsize=(10, 6))
    # # # ax2=ax.twinx()
    # # sns.barplot(x="agent",y="error_times",data=results)
    # # sns.lineplot(x="arrival_rate", y="time", hue="agent",data=results,ax=ax2)
    # # fig.tight_layout()
    # # sns.despine()
    # # fig.savefig(Path(args.output) / f'error_times.pdf')
    # # fig, ax = plt.subplots(figsize=(7, 6))
    # # sns.barplot(x="place",y="reliability",data=results)
    # # sns.despine()
    # # fig.savefig(Path(args.output) / f'emulatio
    # # n_agent_reliability.pdf')
